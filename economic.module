<?php
/**
* @file
* A description of what your module does.
*/

include_once("Ecomonic.inc");

/**
 * Implements menu_hook().
 * @return array
 */
function economic_menu() {
    $item = array();

    //Admin configuration group
    $item["admin/config/economic"] = array(
        'title' => 'E-Conomic',
        'description' => 'Administer e-conomics settings',
        'access arguments' => array("user access")
    );

    //Admin configuration settings
    $item["admin/config/economic/manage"] = array(
        'title' => 'E-Conomic settings',
        'description' => 'Manage e-conomics settings',
        'access arguments' => array("user access"),
        'page callback' => 'drupal_get_form',
        'page arguments' => array("economic_admin_settings_form")
    );

    return $item;
}

/**
 * Implements hook_form()
 * @param $node
 * @param $form_state
 *
 * @return array
 */
function economic_admin_settings_form($node, &$form_state){
    $form = array();

    $form['overview'] = array(
        '#markup' => t("This interface allows you to manage general e-conomic settings"),
        '#prefix' => "<p>",
        '#suffix' => "</p>"
    );

    $form['economic_agreementnumber'] = array(
        '#title' => t("Agreement number"),
        '#type' => 'textfield',
        '#required' => true,
        '#default_value' => variable_get("economic_agreementnumber")
    );

    $form['economic_username'] = array(
        '#title' => t("Username"),
        '#type' => 'textfield',
        '#required' => true,
        '#default_value' => variable_get("economic_username")
    );

    $form['economic_password'] = array(
        '#title' => t("Password"),
        '#type' => 'password',
        '#required' => true,
        '#default_value' => variable_get("economic_password")
    );

    return system_settings_form($form);
}

/**
 * Implements hook_cron()
 */
function economic_cron(){
    try{
        $agreementnumber = variable_get("economic_agreementnumber");
        $username = variable_get("economic_username");
        $password = variable_get("economic_password");

        if($agreementnumber == "" || $username == "" || $password == ""){
            drupal_set_message(t("Specify e-conomic connection data"), "warning");
        }
        else{
            $economic = new Ecomonic($agreementnumber, $username, $password);
            $economic->connect();
            //fetch all economic users
            $debtorHandle = $economic->debtor_GetAll();
            // Get the rid from the roles table.
            $roles = user_roles(TRUE);
            $rid = array_search("e-conomic user", $roles);

            foreach ($debtorHandle as $d) {
                $user = user_load($d->Number);
                $economic_user = $economic->debtor_GetData($d);
                _economic_manage_user($user, $economic_user, $rid);

                //manage user invoices
                $entriesHandle = $economic->debtor_GetEntries($d);
                if($entriesHandle != null){
                    $entryesdata = $economic->entry_GetDataArray($entriesHandle);
                    foreach ($entryesdata as $entry) {
                        //check if exists
                        $query = new EntityFieldQuery();
                        $result = $query
                            ->entityCondition('entity_type', 'node')
                            ->fieldCondition('field_economic_invoice_serialnum', 'value', $entry->SerialNumber, '=')
                            ->execute();

                        if($result){
                            //exist
                            //update
                            $param = array_keys($result['node']);
                            $node = node_load(array_shift($param));

                            if(_economic_compare_node_data($node, $entry) == false){
                                $node->field_economic_date['und'][0]['value']               = $entry->Date;
                                $node->field_economic_invoice_entry['und'][0]['value']      = $entry->VoucherNumber;
                                $node->field_economic_invoice_invoice['und'][0]['value']    = "0";
                                if(property_exists($entry, 'Text'))
                                    $node->field_economic_invoice_text['und'][0]['value']   = $entry->Text;
                                $node->field_economic_invoice_amount['und'][0]['value']     = $entry->Amount;
                                $node->field_economic_invoice_balance['und'][0]['value']    = "0";

                                node_save($node);
                            }
                        }
                        else{
                            //does not exist
                            //create
                            $node = new StdClass();
                            $node->type = 'e_conomic_invoice';
                            node_object_prepare($node);

                            $node->title = 'invoice ' . $entry->SerialNumber;
                            $node->language = LANGUAGE_NONE;

                            $node->field_economic_invoice_date[$node->language][0]['value']     = $entry->Date;
                            $node->field_economic_invoice_entry[$node->language][0]['value']    = $entry->VoucherNumber;
                            $node->field_economic_invoice_invoice[$node->language][0]['value']  = "0";
                            if(property_exists($entry, 'Text'))
                                $node->field_economic_invoice_text[$node->language][0]['value'] = $entry->Text;
                            $node->field_economic_invoice_amount[$node->language][0]['value']   = $entry->Amount;
                            $node->field_economic_invoice_balance[$node->language][0]['value']  = "0";
                            $node->field_economic_invoice_serialnum[$node->language][0]['value']= $entry->SerialNumber;

                            $node = node_submit($node);
                            node_save($node);

                        }
                    }
                }
            }
            $economic->disconnect();
        }
    }
    catch(Exception $e){
        //code:23000 same email address
        drupal_set_message($e->getCode() .  $e->getMessage(), "error");
    }
}

/**
 * Check if node and entry are same
 * @param $node
 * @param $entry
 *
 * @return bool
 * true same. false different.
 */
function _economic_compare_node_data($node, $entry){
    if($node->field_economic_date['und'][0]['value']               != $entry->Date) return false;
    if($node->field_economic_invoice_entry['und'][0]['value']      != $entry->VoucherNumber) return false;
    if($node->field_economic_invoice_invoice['und'][0]['value']    != "0") return false;
    if(property_exists($entry, 'Text'))
        if($node->field_economic_invoice_text['und'][0]['value']   != $entry->Text) return false;
    if($node->field_economic_invoice_amount['und'][0]['value']     != $entry->Amount) return false;
    if($node->field_economic_invoice_balance['und'][0]['value']    != "0") return false;
    return true;
}

/**
 * Create or update user in drupal
 * @param $user
 * @param $economic_user
 * @param $rid
 */
function _economic_manage_user($user, $economic_user, $rid){
    $newuserdata = _economic_create_user_data($economic_user);
    if($newuserdata != null){
        //check ids in drupal
        //if does not exist
        if($user == false){
            //add to drupal
            $newuserdata['roles'] = array($rid => "e-conomic user");
            user_save(null, $newuserdata);
        }else{
            //if economic user update data
            if(in_array('e-conomic user', $user->roles)){
                unset($newuserdata['pass']);
                if($newuserdata['uid'] == 1) $newuserdata['pass'] = '123456';
                //check if needs update
                if(_economic_compare_user_data($user, $economic_user) == false)
                    user_save($user, $newuserdata);
            }
        }
    }
}

/**
 * Compare drupal user and economic user for changes
 * @param $user
 * @param $economic_user
 *
 * @return bool
 * true if objects same. false if something changed
 */
function _economic_compare_user_data($user, $economic_user){
    if($user->uid               != $economic_user->Number)      return false;
    if($user->name              != $economic_user->Email)       return false;
    if($user->mail              != $economic_user->Email)       return false;
    if(_economic_get_value(@$user->economic_name['und'][0]['value'])          != $economic_user->Name)        return false;
    if(isset($economic_user->Address))
        if(_economic_get_value($user->economic_address['und'][0]['value'])   != $economic_user->Address)     return false;
    if(isset($economic_user->PostalCode))
        if(_economic_get_value($user->economic_postalcode['und'][0]['value'])!= $economic_user->PostalCode)  return false;
    if(isset($economic_user->City))
        if(_economic_get_value($user->economic_city['und'][0]['value'])      != $economic_user->City)        return false;
    if(isset($economic_user->Country))
        if(_economic_get_value($user->economic_country['und'][0]['value'])   != $economic_user->Country)     return false;
    if(_economic_get_value($user->economic_balance['und'][0]['value'])       != $economic_user->Balance)     return false;
    return true;
}

function _economic_get_value($var){
    if(isset($var)) return $var;
    return null;
}

/**
 * Creates user data array with values from economic user
 * @param $economic_user
 * @return array null
 */
function _economic_create_user_data($economic_user){
    if(!property_exists($economic_user, 'Email')){
        watchdog('ecomonic', 'Empty email address for user id: @id', array('@id' => $economic_user->Number));
        return null;
    }

    $newuser = array(
        'uid'  => $economic_user->Number,
        'name' => $economic_user->Email,
        'pass' => _economic_generate_random_string(),
        'mail' => $economic_user->Email,
        'status' => 1,
        'economic_name'         => array('und' => array(0 => array('value' => $economic_user->Name))),
        'economic_address'      => array('und' => array(0 => array('value' => @$economic_user->Address))),
        'economic_postalcode'   => array('und' => array(0 => array('value' => @$economic_user->PostalCode))),
        'economic_city'         => array('und' => array(0 => array('value' => @$economic_user->City))),
        'economic_country'      => array('und' => array(0 => array('value' => @$economic_user->Country))),
        'economic_balance'      => array('und' => array(0 => array('value' => $economic_user->Balance))),
    );
    return $newuser;
}

/**
 * Generates random character string
 * @param int $name_length
 * @return string
 */
function _economic_generate_random_string($name_length = 8) {
    $alpha_numeric = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    return substr(str_shuffle($alpha_numeric), 0, $name_length);
}

/**
 * Implements hook_user_update().
 * @param $edit
 * @param $account
 * @param $category
 */
function economic_user_update(&$edit, $account, $category){
    //debug($edit);
    //debug($account);
    if(in_array('e-conomic user', $account->original->roles)){
        try{
            $agreementnumber = variable_get("economic_agreementnumber");
            $username = variable_get("economic_username");
            $password = variable_get("economic_password");

            if($agreementnumber != "" && $username != "" && $password != ""){
                $economic = new Ecomonic($agreementnumber, $username, $password);
                $economic->connect();
                $userhandle = $economic->debtor_FindByNumber($account->uid);
                $name = $edit['economic_name']['und'][0]['value'] == null?$edit['name']:$edit['economic_name']['und'][0]['value'];
                if(count(get_object_vars($userhandle)) == 0)
                {
                    //user does not exist in economic add him
                    $newuser = array(
                        'uid' => $account->uid,
                        'name' => $name,
                        'mail' => $edit['mail'],
                    );
                    if(isset($edit['economic_address']['und'][0]['value'])) $newuser['address'] = $edit['economic_address']['und'][0]['value'];
                    if(isset($edit['economic_postalcode']['und'][0]['value'])) $newuser['postalcode'] = $edit['economic_postalcode']['und'][0]['value'];
                    if(isset($edit['economic_city']['und'][0]['value'])) $newuser['city'] = $edit['economic_city']['und'][0]['value'];
                    if(isset($edit['economic_country']['und'][0]['value'])) $newuser['country'] = $edit['economic_country']['und'][0]['value'];

                    $economic->debtor_CreateFromData($newuser);
                }
                else{
                    //get user
                    $economic_user = $economic->debtor_GetData($userhandle);
                    //check for data change
                    $edit['uid'] = $account->uid;
                    if(_economic_compare_user_data((object)$edit, $economic_user) == false){
                        //save to economic
                        $economic->debtor_SetName($userhandle, $name);
                        $economic->debtor_SetEmail($userhandle, $edit['mail']);
                        if(isset($edit['economic_address']['und'][0]['value'])) $economic->debtor_SetAddress($userhandle, $edit['economic_address']['und'][0]['value']);
                        if(isset($edit['economic_postalcode']['und'][0]['value'])) $economic->debtor_SetPostalCode($userhandle, $edit['economic_postalcode']['und'][0]['value']);
                        if(isset($edit['economic_city']['und'][0]['value'])) $economic->debtor_SetCity($userhandle, $edit['economic_city']['und'][0]['value']);
                        if(isset($edit['economic_country']['und'][0]['value'])) $economic->debtor_SetCountry($userhandle, $edit['economic_country']['und'][0]['value']);
                    }
                }
                $economic->disconnect();
            }
        }
        catch(Exception $e){
            debug($e->getMessage(), 'error');
        }
    }
}

/**
 * Implements hook_user_insert().
 * @param $edit
 * @param $account
 * @param $category
 */
function economic_user_insert(&$edit, $account, $category){
    if(in_array('e-conomic user', $account->roles)){
        try{
            $agreementnumber = variable_get("economic_agreementnumber");
            $username = variable_get("economic_username");
            $password = variable_get("economic_password");

            if($agreementnumber != "" && $username != "" && $password != ""){
                $economic = new Ecomonic($agreementnumber, $username, $password);
                $economic->connect();
                $userhandle = $economic->debtor_FindByNumber($account->uid);
                $name = $edit['economic_name']['und'][0]['value'] == null?$edit['name']:$edit['economic_name']['und'][0]['value'];
                if(count(get_object_vars($userhandle)) == 0)
                {
                    //user does not exist in economic add him
                    $newuser = array(
                        'uid' => $account->uid,
                        'name' => $name,
                        'mail' => $edit['mail']
                    );

                    if(isset($edit['economic_address']['und'][0]['value'])) $newuser['address'] = $edit['economic_address']['und'][0]['value'];
                    if(isset($edit['economic_postalcode']['und'][0]['value'])) $newuser['postalcode'] = $edit['economic_postalcode']['und'][0]['value'];
                    if(isset($edit['economic_city']['und'][0]['value'])) $newuser['city'] = $edit['economic_city']['und'][0]['value'];
                    if(isset($edit['economic_country']['und'][0]['value'])) $newuser['country'] = $edit['economic_country']['und'][0]['value'];

                    $economic->debtor_CreateFromData($newuser);
                }
                $economic->disconnect();
            }
        }
        catch(Exception $e){
            //debug($e->getMessage(), 'error');
        }
    }
}