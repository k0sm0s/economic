<?php
/**
* @file
* A description of what your module does.
*/

include_once("Ecomonic.inc");

/**
 * Implementation of hook_enable().
 */
function economic_enable() {
    _economic_create_field("economic_name", "Name", true);
    _economic_create_field("economic_address", "Address");
    _economic_create_field("economic_postalcode", "PostalCode");
    _economic_create_field("economic_city", "City");
    _economic_create_field("economic_country", "Country");
    _economic_create_field("economic_balance", "Balance");
}

function _economic_create_field($fieldname, $label, $required = false){
    // Check if our field is not already created.
    if (!field_info_field($fieldname)) {
        $field = array(
            'field_name' => $fieldname,
            'type' => "text",
        );
        field_create_field($field);

        // Create the instance on the bundle.
        $instance = array(
            'field_name' => $fieldname,
            'entity_type' => 'user',
            'label' => $label,
            'bundle' => 'user',
            // If you don't set the "required" property then the field wont be required by default.
            'required' => $required,
//            'settings' => array(
//                // Here you inform either or not you want this field showing up on the registration form.
//                'user_register_form' => 1,
//            ),
            'widget' => array(
                'type' => "textfield",
                'weight' => '1',
            ),
        );
        field_create_instance($instance);
    }
}

/**
 * Implements menu_hook().
 * @return array
 */
function economic_menu() {
    $item = array();

    //Admin configuration group
    $item["admin/config/economic"] = array(
        'title' => 'E-Conomic',
        'description' => 'Administer e-conomics settings',
        'access arguments' => array("user access")
    );

    //Admin configuration settings
    $item["admin/config/economic/manage"] = array(
        'title' => 'E-Conomic settings',
        'description' => 'Manage e-conomics settings',
        'access arguments' => array("user access"),
        'page callback' => 'drupal_get_form',
        'page arguments' => array("economic_admin_settings_form")
    );

    return $item;
}

/**
 * Implements hook_form()
 * @param $node
 * @param $form_state
 *
 * @return array
 */
function economic_admin_settings_form($node, &$form_state){
    $form = array();

    $form['overview'] = array(
        '#markup' => t("This interface allows you to manage general e-conomic settings"),
        '#prefix' => "<p>",
        '#suffix' => "</p>"
    );

    $form['economic_agreementnumber'] = array(
        '#title' => t("Agreement number"),
        '#type' => 'textfield',
        '#required' => true,
        '#default_value' => variable_get("economic_agreementnumber")
    );

    $form['economic_username'] = array(
        '#title' => t("Username"),
        '#type' => 'textfield',
        '#required' => true,
        '#default_value' => variable_get("economic_username")
    );

    $form['economic_password'] = array(
        '#title' => t("Password"),
        '#type' => 'textfield',
        '#required' => true,
        '#default_value' => variable_get("economic_password")
    );

    return system_settings_form($form);
}

/**
 * Implements hook_cron()
 */
function economic_cron(){
    try{
        $agreementnumber = variable_get("economic_agreementnumber");
        $username = variable_get("economic_username");
        $password = variable_get("economic_password");

        if($agreementnumber == "" || $username == "" || $password == ""){
            drupal_set_message(t("Specify e-conomic connection data"), "warning");
        }
        else{
            $economic = new Ecomonic($agreementnumber, $username, $password);
            $economic->connect();
            //fetch all economic users
            $debtorHandle = $economic->debtor_GetAll();

            foreach ($debtorHandle as $d) {
                $user = user_load($d->Number);
                $economic_user = $economic->debtor_GetData($d);
                $newuserdata = create_user_data($economic_user);
                //check ids in drupal
                //if does not exist
                if($user == false){
                    //add to drupal
                    user_save(null, $newuserdata);
                }else{
                    //if exists update data
                    //check if needs update
                    if(compare_user_data($user, $economic_user) == false)
                        user_save($user, $newuserdata);
                }
            }
            $economic->disconnect();
        }
    }
    catch(Exception $e){
        drupal_set_message($e->getMessage(), "error");
    }
}

/**
 * Compare drupal user and economic user for changes
 * @param $user
 * @param $economic_user
 *
 * @return bool
 * true if objects same. false if something changed
 */
function compare_user_data($user, $economic_user){
    if($user->uid               != $economic_user->Number)      return false;
    if($user->name              != $economic_user->Email)       return false;
    if($user->mail              != $economic_user->Email)       return false;
    if(_economic_get_value($user->economic_name['und'][0]['value'])          != $economic_user->Name)        return false;
    if(isset($economic_user->Address))
        if(_economic_get_value($user->economic_address['und'][0]['value'])   != $economic_user->Address)     return false;
    if(isset($economic_user->PostalCode))
        if(_economic_get_value($user->economic_postalcode['und'][0]['value'])!= $economic_user->PostalCode)  return false;
    if(isset($economic_user->City))
        if(_economic_get_value($user->economic_city['und'][0]['value'])      != $economic_user->City)        return false;
    if(isset($economic_user->Country))
        if(_economic_get_value($user->economic_country['und'][0]['value'])   != $economic_user->Country)     return false;
    if(_economic_get_value($user->economic_balance['und'][0]['value'])       != $economic_user->Balance)     return false;
    return true;
}

function _economic_get_value($var){
    if(isset($var)) return $var;
    return null;
}

/**
 * Creates user data array with values from economic user
 * @param $economic_user
 * @return array
 */
function create_user_data($economic_user){
    $newuser = array(
        'uid'  => $economic_user->Number,
        'name' => $economic_user->Email,
        'pass' => generate_random_string(),
        'mail' => $economic_user->Email,
        'status' => 1,
        'economic_name'         => array('und' => array(0 => array('value' => $economic_user->Name))),
        'economic_address'      => array('und' => array(0 => array('value' => @$economic_user->Address))),
        'economic_postalcode'   => array('und' => array(0 => array('value' => @$economic_user->PostalCode))),
        'economic_city'         => array('und' => array(0 => array('value' => @$economic_user->City))),
        'economic_country'      => array('und' => array(0 => array('value' => @$economic_user->Country))),
        'economic_balance'      => array('und' => array(0 => array('value' => $economic_user->Balance)))
    );
    return $newuser;
}

/**
 * Generates random character string
 * @param int $name_length
 * @return string
 */
function generate_random_string($name_length = 8) {
    $alpha_numeric = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    return substr(str_shuffle($alpha_numeric), 0, $name_length);
}

/**
 * Implements hook_user_update().
 * @param $edit
 * @param $account
 * @param $category
 */
function economic_user_update(&$edit, $account, $category){
    //debug($edit['economic_name']['und'][0]['value']);
    //debug($edit);
    //debug($account);
    try{
        $agreementnumber = variable_get("economic_agreementnumber");
        $username = variable_get("economic_username");
        $password = variable_get("economic_password");

        if($agreementnumber != "" && $username != "" && $password != ""){
            $economic = new Ecomonic($agreementnumber, $username, $password);
            $economic->connect();
            $userhandle = $economic->debtor_FindByNumber($account->uid);
            $name = $edit['economic_name']['und'][0]['value'] == null?$edit['name']:$edit['economic_name']['und'][0]['value'];
            if(count(get_object_vars($userhandle)) == 0)
            {
                //user does not exist in economic add him
                $newuser = array(
                    'uid' => $account->uid,
                    'name' => $name,
                    'mail' => $edit['mail'],
                );
                if(isset($edit['economic_address']['und'][0]['value'])) $newuser['address'] = $edit['economic_address']['und'][0]['value'];
                if(isset($edit['economic_postalcode']['und'][0]['value'])) $newuser['postalcode'] = $edit['economic_postalcode']['und'][0]['value'];
                if(isset($edit['economic_city']['und'][0]['value'])) $newuser['city'] = $edit['economic_city']['und'][0]['value'];
                if(isset($edit['economic_country']['und'][0]['value'])) $newuser['country'] = $edit['economic_country']['und'][0]['value'];

                $economic->debtor_CreateFromData($newuser);
            }
            else{
                //get user
                $economic_user = $economic->debtor_GetData($userhandle);
                //check for data change
                $edit['uid'] = $account->uid;
                if(compare_user_data((object)$edit, $economic_user) == false){
                    //save to economic
                    $economic->debtor_SetName($userhandle, $name);
                    $economic->debtor_SetEmail($userhandle, $edit['mail']);
                    if(isset($edit['economic_address']['und'][0]['value'])) $economic->debtor_SetAddress($userhandle, $edit['economic_address']['und'][0]['value']);
                    if(isset($edit['economic_postalcode']['und'][0]['value'])) $economic->debtor_SetPostalCode($userhandle, $edit['economic_postalcode']['und'][0]['value']);
                    if(isset($edit['economic_city']['und'][0]['value'])) $economic->debtor_SetCity($userhandle, $edit['economic_city']['und'][0]['value']);
                    if(isset($edit['economic_country']['und'][0]['value'])) $economic->debtor_SetCountry($userhandle, $edit['economic_country']['und'][0]['value']);
                }
            }
            $economic->disconnect();
        }
    }
    catch(Exception $e){
        debug($e->getMessage(), 'error');
    }
}

/**
 * Implements hook_user_insert().
 * @param $edit
 * @param $account
 * @param $category
 */
function economic_user_insert(&$edit, $account, $category){
    try{
        $agreementnumber = variable_get("economic_agreementnumber");
        $username = variable_get("economic_username");
        $password = variable_get("economic_password");

        if($agreementnumber != "" && $username != "" && $password != ""){
            $economic = new Ecomonic($agreementnumber, $username, $password);
            $economic->connect();
            $userhandle = $economic->debtor_FindByNumber($account->uid);
            $name = $edit['economic_name']['und'][0]['value'] == null?$edit['name']:$edit['economic_name']['und'][0]['value'];
            if(count(get_object_vars($userhandle)) == 0)
            {
                //user does not exist in economic add him
                $newuser = array(
                    'uid' => $account->uid,
                    'name' => $name,
                    'mail' => $edit['mail']
                );

                if(isset($edit['economic_address']['und'][0]['value'])) $newuser['address'] = $edit['economic_address']['und'][0]['value'];
                if(isset($edit['economic_postalcode']['und'][0]['value'])) $newuser['postalcode'] = $edit['economic_postalcode']['und'][0]['value'];
                if(isset($edit['economic_city']['und'][0]['value'])) $newuser['city'] = $edit['economic_city']['und'][0]['value'];
                if(isset($edit['economic_country']['und'][0]['value'])) $newuser['country'] = $edit['economic_country']['und'][0]['value'];

                $economic->debtor_CreateFromData($newuser);
            }
            $economic->disconnect();
        }
    }
    catch(Exception $e){
        //debug($e->getMessage(), 'error');
    }
}